// <auto-generated />
using System;
using ExamPlatform.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ExamPlatform.Database.Migrations
{
    [DbContext(typeof(ExamPlatformContext))]
    partial class ExamPlatformContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ExamPlatform.Database.Models.DBAnswer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .HasMaxLength(200);

                    b.Property<bool>("IsCorrect");

                    b.Property<int>("Points");

                    b.Property<int>("QuestionId");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("ExamPlatform.Database.Models.DBAttachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttachmentTypeId");

                    b.Property<string>("FilePath")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<int>("QuestionId");

                    b.Property<string>("Text")
                        .HasMaxLength(200);

                    b.HasKey("AttachmentId");

                    b.HasIndex("AttachmentTypeId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("ExamPlatform.Database.Models.DBAttachmentType", b =>
                {
                    b.Property<int>("AttachmentTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("AttachmentTypeId");

                    b.ToTable("AttachmentTypes");
                });

            modelBuilder.Entity("ExamPlatform.Database.Models.DBCategoryType", b =>
                {
                    b.Property<int>("CategoryTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("CategoryTypeId");

                    b.ToTable("CategoryTypes");
                });

            modelBuilder.Entity("ExamPlatform.Database.Models.DBQuestion", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AttachmentId");

                    b.Property<string>("Content")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<int>("PointsSum");

                    b.Property<int>("QuestionTypeId");

                    b.HasKey("QuestionId");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("ExamPlatform.Database.Models.DBQuestionCategory", b =>
                {
                    b.Property<int>("QuestionId");

                    b.Property<int>("CategoryTypeId");

                    b.HasKey("QuestionId", "CategoryTypeId");

                    b.HasIndex("CategoryTypeId");

                    b.ToTable("QuestionsCategories");
                });

            modelBuilder.Entity("ExamPlatform.Database.Models.DBQuestionType", b =>
                {
                    b.Property<int>("QuestionTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("QuestionTypeId");

                    b.ToTable("QuestionTypes");
                });

            modelBuilder.Entity("ExamPlatform.Database.Models.DBRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ExamPlatform.Database.Models.DBTest", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int>("RequiredPercentage");

                    b.Property<int>("Time");

                    b.Property<int>("TotalPointSum");

                    b.HasKey("TestId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("ExamPlatform.Database.Models.DBTestCategory", b =>
                {
                    b.Property<int>("TestId");

                    b.Property<int>("CategoryTypeId");

                    b.HasKey("TestId", "CategoryTypeId");

                    b.HasIndex("CategoryTypeId");

                    b.ToTable("TestsCategories");
                });

            modelBuilder.Entity("ExamPlatform.Database.Models.DBTestQuestion", b =>
                {
                    b.Property<int>("TestId");

                    b.Property<int>("QuestionId");

                    b.HasKey("TestId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("TestsQuestions");
                });

            modelBuilder.Entity("ExamPlatform.Database.Models.DBTestSummaryType", b =>
                {
                    b.Property<int>("TestSummaryTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("TestSummaryTypeId");

                    b.ToTable("TestSummaryTypes");
                });

            modelBuilder.Entity("ExamPlatform.Database.Models.DBUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ExamPlatform.Database.Models.DBUserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UsersRoles");
                });

            modelBuilder.Entity("ExamPlatform.Database.Models.DBUserTest", b =>
                {
                    b.Property<Guid>("UserTestId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AutoPointAquired");

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<int>("ManualPointAquired");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp");

                    b.Property<int>("TestId");

                    b.Property<int>("TestSummaryTypeId");

                    b.Property<int>("TotalPointAquired");

                    b.Property<Guid>("UserId");

                    b.Property<int>("UserTestStatusId");

                    b.HasKey("UserTestId");

                    b.HasIndex("TestId");

                    b.HasIndex("TestSummaryTypeId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserTestStatusId");

                    b.ToTable("UsersTests");
                });

            modelBuilder.Entity("ExamPlatform.Database.Models.DBUserTestAnswer", b =>
                {
                    b.Property<int>("UserTestAnswerId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AnswerId");

                    b.Property<string>("Content");

                    b.Property<int>("QuestionId");

                    b.Property<Guid>("UserTestId");

                    b.Property<int?>("PointsForOpenQuestion");

                    b.HasKey("UserTestAnswerId");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserTestId");

                    b.ToTable("UserTestAnswer");
                });

            modelBuilder.Entity("ExamPlatform.Database.Models.DBUserTestStatus", b =>
                {
                    b.Property<int>("UserTestStatusId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("UserTestStatusId");

                    b.ToTable("UserTestStatuses");
                });

            modelBuilder.Entity("ExamPlatform.Database.Models.DBAnswer", b =>
                {
                    b.HasOne("ExamPlatform.Database.Models.DBQuestion", "Question")
                        .WithMany("Anwsers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ExamPlatform.Database.Models.DBAttachment", b =>
                {
                    b.HasOne("ExamPlatform.Database.Models.DBQuestion", "Question")
                        .WithOne("Attachment")
                        .HasForeignKey("ExamPlatform.Database.Models.DBAttachment", "AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ExamPlatform.Database.Models.DBAttachmentType", "AttachmentType")
                        .WithMany("Attachments")
                        .HasForeignKey("AttachmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ExamPlatform.Database.Models.DBQuestion", b =>
                {
                    b.HasOne("ExamPlatform.Database.Models.DBQuestionType", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ExamPlatform.Database.Models.DBQuestionCategory", b =>
                {
                    b.HasOne("ExamPlatform.Database.Models.DBCategoryType", "CategoryType")
                        .WithMany("QuestionsCategories")
                        .HasForeignKey("CategoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ExamPlatform.Database.Models.DBQuestion", "Question")
                        .WithMany("QuestionsCategories")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ExamPlatform.Database.Models.DBTestCategory", b =>
                {
                    b.HasOne("ExamPlatform.Database.Models.DBCategoryType", "CategoryType")
                        .WithMany("TestsCategories")
                        .HasForeignKey("CategoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ExamPlatform.Database.Models.DBTest", "Test")
                        .WithMany("TestsCategories")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ExamPlatform.Database.Models.DBTestQuestion", b =>
                {
                    b.HasOne("ExamPlatform.Database.Models.DBQuestion", "Question")
                        .WithMany("TestsQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ExamPlatform.Database.Models.DBTest", "Test")
                        .WithMany("TestsQuestions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ExamPlatform.Database.Models.DBUserRole", b =>
                {
                    b.HasOne("ExamPlatform.Database.Models.DBRole", "Role")
                        .WithMany("UsersRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ExamPlatform.Database.Models.DBUser", "User")
                        .WithMany("UsersRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ExamPlatform.Database.Models.DBUserTest", b =>
                {
                    b.HasOne("ExamPlatform.Database.Models.DBTest", "Test")
                        .WithMany("UsersTests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ExamPlatform.Database.Models.DBTestSummaryType", "TestSummaryType")
                        .WithMany("UsersTests")
                        .HasForeignKey("TestSummaryTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ExamPlatform.Database.Models.DBUser", "User")
                        .WithMany("UsersTests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ExamPlatform.Database.Models.DBUserTestStatus", "UserTestStatus")
                        .WithMany("UsersTests")
                        .HasForeignKey("UserTestStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ExamPlatform.Database.Models.DBUserTestAnswer", b =>
                {
                    b.HasOne("ExamPlatform.Database.Models.DBAnswer", "Answer")
                        .WithMany("UserTestAnswers")
                        .HasForeignKey("AnswerId");

                    b.HasOne("ExamPlatform.Database.Models.DBQuestion", "Question")
                        .WithMany("UserTestAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ExamPlatform.Database.Models.DBUserTest", "UserTest")
                        .WithMany("UserTestAnswers")
                        .HasForeignKey("UserTestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
